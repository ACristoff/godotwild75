[gd_scene load_steps=27 format=4 uid="uid://gcdapkkqr808"]

[ext_resource type="Texture2D" uid="uid://cig0shmgu75ha" path="res://Assets/Environment/GridTileMap/TilemapGrid.png" id="1_vknam"]
[ext_resource type="Shader" path="res://Assets/Shaders/wavyshader.gdshader" id="2_21iao"]
[ext_resource type="Texture2D" uid="uid://j8umjy8ha03y" path="res://Assets/Environment/GridTileMap/BACKGROUND.png" id="2_kgti3"]
[ext_resource type="Texture2D" uid="uid://dwuvoq82qclc3" path="res://Assets/Environment/GridTileMap/white.png" id="3_1h3k0"]
[ext_resource type="Texture2D" uid="uid://c3lhkvhk1dngf" path="res://Assets/Environment/GridTileMap/Separator3.png" id="4_l0omh"]
[ext_resource type="Texture2D" uid="uid://d30a3g32knlda" path="res://Assets/Environment/GridTileMap/Separator4.png" id="5_y62vi"]
[ext_resource type="PackedScene" uid="uid://domnit2msh3jg" path="res://Assets/Shaders/god_ray.tscn" id="6_sanjg"]
[ext_resource type="PackedScene" uid="uid://uxh57d4b5bja" path="res://Assets/Shaders/smog.tscn" id="7_qpput"]
[ext_resource type="PackedScene" uid="uid://cwgsd5xm65etm" path="res://Assets/Shaders/onibi_spawner.tscn" id="8_ny6nx"]

[sub_resource type="TileSetAtlasSource" id="TileSetAtlasSource_2dks7"]
resource_name = "GridTiles"
texture = ExtResource("1_vknam")
texture_region_size = Vector2i(32, 32)
0:0/0 = 0
1:0/0 = 0
2:0/0 = 0
0:1/0 = 0
1:1/0 = 0
2:1/0 = 0
3:1/0 = 0
3:0/0 = 0
4:0/0 = 0
5:0/0 = 0
4:1/0 = 0
5:1/0 = 0
6:0/0 = 0
7:0/0 = 0
7:1/0 = 0
6:1/0 = 0

[sub_resource type="TileSet" id="TileSet_i7mqe"]
tile_size = Vector2i(32, 32)
physics_layer_0/collision_layer = 1
sources/0 = SubResource("TileSetAtlasSource_2dks7")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_vytax"]

[sub_resource type="Gradient" id="Gradient_h66sm"]
offsets = PackedFloat32Array(0.0709677, 0.503226, 0.883871)
colors = PackedColorArray(0, 0, 0, 1, 1, 1, 1, 1, 0, 0, 0, 1)

[sub_resource type="GradientTexture1D" id="GradientTexture1D_6ehh7"]
gradient = SubResource("Gradient_h66sm")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_del0o"]
shader = ExtResource("2_21iao")
shader_parameter/progress = 0.0
shader_parameter/meltness = 5.0
shader_parameter/how_low = 1.0
shader_parameter/wave_frequency = 30.0

[sub_resource type="ShaderMaterial" id="ShaderMaterial_78oyj"]
shader = ExtResource("2_21iao")
shader_parameter/progress = 0.5
shader_parameter/meltness = 5.0
shader_parameter/how_low = 1.0
shader_parameter/wave_frequency = 30.0

[sub_resource type="Animation" id="Animation_hk5jc"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Separator2:material:shader_parameter/progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}

[sub_resource type="Animation" id="Animation_ibrwe"]
resource_name = "wave2"
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Separator2:material:shader_parameter/progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [0.0, 1.0]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_ke7wo"]
_data = {
"RESET": SubResource("Animation_hk5jc"),
"wave2": SubResource("Animation_ibrwe")
}

[sub_resource type="Animation" id="Animation_dbost"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Separator:material:shader_parameter/progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.5]
}

[sub_resource type="Animation" id="Animation_phsm8"]
resource_name = "wavy3"
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Separator:material:shader_parameter/progress")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 1),
"transitions": PackedFloat32Array(1, 1),
"update": 0,
"values": [0.5, 1.5]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_n0rqa"]
_data = {
"RESET": SubResource("Animation_dbost"),
"wavy3": SubResource("Animation_phsm8")
}

[sub_resource type="Shader" id="Shader_ibkms"]
resource_local_to_scene = true
code = "shader_type canvas_item;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture, filter_linear_mipmap;
uniform float angle = -0.3;
uniform float position = -0.2;
uniform float spread : hint_range(0.0, 1.0) = 0.5;
uniform float cutoff : hint_range(-1.0, 1.0) = 0.1;
uniform float falloff : hint_range(0.0, 1.0) = 0.2;
uniform float edge_fade : hint_range(0.0, 1.0) = 0.15;

uniform float speed = 1.0;
uniform float ray1_density = 8.0;
uniform float ray2_density = 30.0;
uniform float ray2_intensity : hint_range(0.0, 1.0) = 0.3;

uniform vec4 color : source_color = vec4(1.0, 0.9, 0.65, 0.8);

uniform bool hdr = false;
uniform float seed = 5.0;

// Random and noise functions from Book of Shader's chapter on Noise.
float random(vec2 _uv) {
    return fract(sin(dot(_uv.xy,
                         vec2(12.9898, 78.233))) *
        43758.5453123);
}

float noise (in vec2 uv) {
    vec2 i = floor(uv);
    vec2 f = fract(uv);

    // Four corners in 2D of a tile
    float a = random(i);
    float b = random(i + vec2(1.0, 0.0));
    float c = random(i + vec2(0.0, 1.0));
    float d = random(i + vec2(1.0, 1.0));


    // Smooth Interpolation

    // Cubic Hermine Curve. Same as SmoothStep()
    vec2 u = f * f * (3.0-2.0 * f);

    // Mix 4 coorners percentages
    return mix(a, b, u.x) +
            (c - a)* u.y * (1.0 - u.x) +
            (d - b) * u.x * u.y;
}

mat2 rotate(float _angle){
    return mat2(vec2(cos(_angle), -sin(_angle)),
                vec2(sin(_angle), cos(_angle)));
}

vec4 screen(vec4 base, vec4 blend){
	return 1.0 - (1.0 - base) * (1.0 - blend);
}

void fragment()
{
	
	// Rotate, skew and move the UVs
	vec2 transformed_uv = ( rotate(angle) * (UV - position) )  / ( (UV.y + spread) - (UV.y * spread) );
	
	// Animate the ray according the the new transformed UVs
	vec2 ray1 = vec2(transformed_uv.x * ray1_density + sin(TIME * 0.1 * speed) * (ray1_density * 0.2) + seed, 1.0);
	vec2 ray2 = vec2(transformed_uv.x * ray2_density + sin(TIME * 0.2 * speed) * (ray1_density * 0.2) + seed, 1.0);
	
	// Cut off the ray's edges
	float cut = step(cutoff, transformed_uv.x) * step(cutoff, 1.0 - transformed_uv.x);
	ray1 *= cut;
	ray2 *= cut;
	
	// Apply the noise pattern (i.e. create the rays)
	float rays;
	
	if (hdr){
		// This is not really HDR, but check this to not clamp the two merged rays making 
		// their values go over 1.0. Can make for some nice effect
		rays = noise(ray1) + (noise(ray2) * ray2_intensity);
	}
	else{
		 rays = clamp(noise(ray1) + (noise(ray2) * ray2_intensity), 0., 1.);
	}
	
	// Fade out edges
	rays *= smoothstep(0.0, falloff, (1.0 - UV.y)); // Bottom
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, transformed_uv.x); // Left
	rays *= smoothstep(0.0 + cutoff, edge_fade + cutoff, 1.0 - transformed_uv.x); // Right
	
	// Color to the rays
	vec3 shine = vec3(rays) * color.rgb;

	// Try different blending modes for a nicer effect. \"Screen\" is included in the code,
	// but take a look at https://godotshaders.com/snippet/blending-modes/ for more.
	// With \"Screen\" blend mode:
	shine = screen(texture(SCREEN_TEXTURE, SCREEN_UV), vec4(color)).rgb;
	
	COLOR = vec4(shine, rays * color.a);
}
"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_wb1fm"]
resource_local_to_scene = true
shader = SubResource("Shader_ibkms")
shader_parameter/angle = -0.3
shader_parameter/position = -0.2
shader_parameter/spread = 0.62
shader_parameter/cutoff = 0.183
shader_parameter/falloff = 0.732
shader_parameter/edge_fade = 0.065
shader_parameter/speed = 1.0
shader_parameter/ray1_density = 8.0
shader_parameter/ray2_density = 30.0
shader_parameter/ray2_intensity = 0.651
shader_parameter/color = Color(1, 0.9, 0.65, 0.8)
shader_parameter/hdr = false
shader_parameter/seed = 5.0

[sub_resource type="Shader" id="Shader_e6m4v"]
resource_local_to_scene = true
code = "shader_type canvas_item;
render_mode blend_mix, unshaded;

uniform sampler2D SCREEN_TEXTURE : hint_screen_texture;
uniform float intensity : hint_range(0.0, 1.0) = 1.0;
uniform sampler2D noise_texture : hint_default_white;
uniform float use_custom_texture : hint_range(0.0, 1.0) = 0.0;
uniform float clouds_speed : hint_range(0.0, 20.0, 0.01) = 2.0;
uniform float clouds_direction : hint_range(-0.5, 0.5, 0.01) = 0.2;
uniform float clouds_scale : hint_range(0.0, 4.0, 0.01) = 1.0;
uniform float clouds_cutoff : hint_range(0.0, 1.0, 0.01) = 0.3;
uniform float clouds_fuzziness : hint_range(0.0, 2.0, 0.01) = 0.5;
uniform vec3 clouds_color : source_color = vec3(1.0, 1.0, 1.0);
uniform float edge_fade : hint_range(0.0, 1.0, 0.01) = 0.15;

// Separate float uniforms for box_position
uniform float box_position_x : hint_range(0.0, 1.0) = 0.5; // X position
uniform float box_position_y : hint_range(0.0, 1.0) = 0.5; // Y position
uniform float box_size : hint_range(0.0, 1.0) = 0.2; // Size of the box

uniform int PRIME_X = 501125221;
uniform int PRIME_Y = 1136930381;

float lerp(float a, float b, float t) {
    return a + t * (b - a);
}

float cubic_lerp(float a, float b, float c, float d, float t) {
    float p = d - c - (a - b);
    return t * t * t * p + t * t * (a - b - p) + t * (c - a) + b;
}

float ping_pong(float t) {
    t -= trunc(t * 0.5) * 2.0;
    return t < 1.0 ? t : 2.0 - t;
}

int hash(int seed, int x_primed, int y_primed) {
    return (seed ^ x_primed ^ y_primed) * 0x27d4eb2d;
}

float val_coord(int seed, int x_primed, int y_primed) {
    int hash = hash(seed, x_primed, y_primed);
    hash *= hash;
    hash ^= hash << 19;
    return float(hash) * (1.0 / 2147483648.0);
}

float single_value_cubic(int seed, float x, float y) {
    int x1 = int(floor(x));
    int y1 = int(floor(y));

    float xs = x - float(x1);
    float ys = y - float(y1);

    x1 *= PRIME_X;
    y1 *= PRIME_Y;
    int x0 = x1 - PRIME_X;
    int y0 = y1 - PRIME_Y;
    int x2 = x1 + PRIME_X;
    int y2 = y1 + PRIME_Y;
    int x3 = x1 + (PRIME_X << 1);
    int y3 = y1 + (PRIME_Y << 1);

    return cubic_lerp(
        cubic_lerp(val_coord(seed, x0, y0), val_coord(seed, x1, y0), val_coord(seed, x2, y0), val_coord(seed, x3, y0), xs),
        cubic_lerp(val_coord(seed, x0, y1), val_coord(seed, x1, y1), val_coord(seed, x2, y1), val_coord(seed, x3, y1), xs),
        cubic_lerp(val_coord(seed, x0, y2), val_coord(seed, x1, y2), val_coord(seed, x2, y2), val_coord(seed, x3, y2), xs),
        cubic_lerp(val_coord(seed, x0, y3), val_coord(seed, x1, y3), val_coord(seed, x2, y3), val_coord(seed, x3, y3), xs),
    ys) * (1.0 / (1.5 * 1.5));
}

const float FRACTAL_BOUNDING = 1.0 / 1.75;
const int OCTAVES = 5;
const float PING_PONG_STRENGTH = 2.0;
const float WEIGHTED_STRENGTH = 0.0;
const float GAIN = 0.5;
const float LACUNARITY = 2.0;

float gen_fractal_ping_pong(vec2 pos, int seed, float frequency) {
    float x = pos.x * frequency;
    float y = pos.y * frequency;
    float sum = 0.0;
    float amp = FRACTAL_BOUNDING;
    for (int i = 0; i < OCTAVES; i++) {
        float noise = ping_pong((single_value_cubic(seed++, x, y) + 1.0) * PING_PONG_STRENGTH);
        sum += (noise - 0.5) * 2.0 * amp;
        amp *= lerp(1.0, noise, WEIGHTED_STRENGTH);
        x *= LACUNARITY;
        y *= LACUNARITY;
        amp *= GAIN;
    }
    return sum * 0.5 + 0.5;
}

float calculate_edge_fade(vec2 uv) {
    vec2 fade = smoothstep(vec2(0.0), vec2(edge_fade), uv) *
                smoothstep(vec2(0.0), vec2(edge_fade), 1.0 - uv);
    return fade.x * fade.y;
}

vec4 overlay(vec4 base, vec4 blend) {
    vec4 limit = step(0.5, base);
    return mix(2.0 * base * blend, 1.0 - 2.0 * (1.0 - base) * (1.0 - blend), limit);
}

void fragment() {
    // BLENDING render_mode
    vec4 bg_color = texture(SCREEN_TEXTURE, SCREEN_UV);
    COLOR.rgb = mix(COLOR, overlay(bg_color, COLOR), intensity).rgb;

    // Get box position from separate floats
    vec2 box_position = vec2(box_position_x, box_position_y);
    float box_half_size = box_size * 0.5;

    // Calculate if the current pixel is inside the box (masking out clouds inside the box)
    bool inside_box = abs(UV.x - box_position.x) < box_half_size && abs(UV.y - box_position.y) < box_half_size;

    // Initialize cloud density variable
    float cloud_density = 0.0;

    if (inside_box) {
        // Set cloud density to 0 for pixels inside the box (this masks the clouds)
        cloud_density = 0.0;
    } else {
        // Cloud drawing logic outside the box
        vec2 base_uv = UV * clouds_scale;
        float time = TIME * clouds_speed * 0.01;
        float sin_x = sin(clouds_direction * PI * 2.0);
        float cos_y = cos(clouds_direction * PI * 2.0);
        vec2 clouds_movement = vec2(sin_x, cos_y) * time;

        if (use_custom_texture > 0.5) {
            cloud_density = texture(noise_texture, base_uv + clouds_movement).r;
        } else {
            float noise_top = gen_fractal_ping_pong((base_uv + clouds_movement), 0, 0.5);
            float noise_middle = gen_fractal_ping_pong((base_uv + clouds_movement * 0.89), 1, 0.75);
            float noise_bottom = gen_fractal_ping_pong((base_uv + clouds_movement * 0.79), 2, 1.0);

            float noise_bottom_smooth = smoothstep(clouds_cutoff, clouds_cutoff + clouds_fuzziness, noise_bottom);
            float noise_middle_smooth = smoothstep(clouds_cutoff, clouds_cutoff + clouds_fuzziness, noise_middle + noise_bottom_smooth * 0.2) * 1.1;
            float noise_top_smooth = smoothstep(clouds_cutoff, clouds_cutoff + clouds_fuzziness, noise_top + noise_middle_smooth * 0.4) * 1.2;

            cloud_density = clamp(noise_top_smooth + noise_middle_smooth + noise_bottom_smooth, 0.0, 1.0);
        }
    }

    // Calculate edge fade for smooth transition
    float edge_alpha = calculate_edge_fade(UV);
    COLOR = vec4(clouds_color, cloud_density * edge_alpha);
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_nqf54"]
resource_local_to_scene = true
shader = SubResource("Shader_e6m4v")
shader_parameter/intensity = 1.0
shader_parameter/use_custom_texture = 0.0
shader_parameter/clouds_speed = 3.06
shader_parameter/clouds_direction = 0.28
shader_parameter/clouds_scale = 2.11
shader_parameter/clouds_cutoff = 0.5
shader_parameter/clouds_fuzziness = 0.0
shader_parameter/clouds_color = Color(0, 0.7, 1, 1)
shader_parameter/edge_fade = 0.66
shader_parameter/box_position_x = 0.5
shader_parameter/box_position_y = 0.5
shader_parameter/box_size = 0.0
shader_parameter/PRIME_X = 501125701
shader_parameter/PRIME_Y = 1136930381

[node name="Environment" type="TileMapLayer"]
tile_map_data = PackedByteArray("AAABAAEAAAACAAEAAAADAAEAAAADAAAAAAAFAAEAAAADAAAAAAAHAAEAAAADAAAAAAAJAAEAAAACAAEAAAALAAEAAAAHAAAAAAANAAEAAAAHAAAAAAAPAAEAAAAHAAAAAAARAAEAAAAHAAAAAAATAAEAAAAGAAEAAAASAAoAAAAGAAEAAAAQAAoAAAAGAAEAAAAOAAoAAAAGAAEAAAAMAAoAAAAHAAAAAAAKAAoAAAAGAAEAAAAIAAoAAAACAAEAAAAGAAoAAAACAAEAAAAEAAoAAAADAAAAAAACAAoAAAACAAEAAAABAAkAAAAAAAAAAAAAAAoAAAACAAEAAAAAAAgAAAACAAEAAAABAAcAAAABAAEAAAAAAAYAAAACAAEAAAABAAUAAAABAAEAAAAAAAQAAAACAAEAAAABAAMAAAAAAAAAAAAAAAIAAAACAAEAAAAAAAEAAAADAAEAAAABAAIAAAAAAAEAAAAAAAMAAAACAAAAAAACAAEAAAACAAAAAAAEAAEAAAACAAAAAAAGAAEAAAACAAAAAAAIAAEAAAACAAAAAAAKAAEAAAAGAAAAAAAMAAEAAAAGAAAAAAAOAAEAAAAGAAAAAAAQAAEAAAAGAAAAAAASAAEAAAAGAAAAAAATAAoAAAAHAAEAAAARAAoAAAAHAAEAAAAPAAoAAAAHAAEAAAANAAoAAAAHAAEAAAALAAoAAAAGAAAAAAAJAAoAAAADAAEAAAAHAAoAAAADAAEAAAAFAAoAAAADAAEAAAADAAoAAAADAAEAAAABAAoAAAADAAEAAAAAAAkAAAADAAEAAAABAAgAAAAAAAEAAAAAAAcAAAADAAEAAAABAAYAAAAAAAEAAAAAAAUAAAADAAEAAAABAAQAAAABAAAAAAACAAIAAAAAAAAAAAACAAMAAAAAAAEAAAACAAQAAAAAAAAAAAACAAUAAAAAAAEAAAACAAYAAAAAAAAAAAACAAcAAAAAAAEAAAACAAgAAAAAAAAAAAACAAkAAAAAAAEAAAADAAIAAAABAAAAAAADAAMAAAABAAEAAAADAAQAAAABAAAAAAADAAUAAAABAAEAAAADAAYAAAABAAAAAAADAAcAAAAAAAAAAAADAAgAAAAAAAEAAAADAAkAAAABAAEAAAAEAAIAAAAAAAAAAAAEAAMAAAAAAAEAAAAEAAQAAAAAAAAAAAAEAAUAAAAAAAEAAAAEAAYAAAAAAAAAAAAEAAcAAAABAAAAAAAEAAgAAAABAAEAAAAEAAkAAAAAAAEAAAAFAAIAAAABAAAAAAAFAAMAAAABAAEAAAAFAAQAAAABAAAAAAAFAAUAAAABAAEAAAAFAAYAAAABAAAAAAAFAAcAAAAAAAAAAAAFAAgAAAAAAAEAAAAFAAkAAAAAAAAAAAAGAAIAAAAAAAAAAAAGAAMAAAAAAAEAAAAGAAQAAAAAAAAAAAAGAAUAAAAAAAEAAAAGAAYAAAAAAAAAAAAGAAcAAAABAAAAAAAGAAgAAAABAAEAAAAGAAkAAAABAAAAAAAHAAIAAAABAAAAAAAHAAMAAAABAAEAAAAHAAQAAAABAAAAAAAHAAUAAAABAAEAAAAHAAYAAAABAAAAAAAHAAcAAAAAAAAAAAAHAAgAAAAAAAEAAAAHAAkAAAABAAEAAAAIAAIAAAAAAAAAAAAIAAMAAAAAAAEAAAAIAAQAAAAAAAAAAAAIAAUAAAAAAAEAAAAIAAYAAAAAAAAAAAAIAAcAAAABAAAAAAAIAAgAAAABAAEAAAAIAAkAAAAAAAEAAAAJAAIAAAADAAEAAAAJAAMAAAACAAEAAAAJAAQAAAADAAEAAAAJAAUAAAACAAEAAAAJAAYAAAADAAEAAAAJAAcAAAACAAEAAAAJAAgAAAADAAEAAAAJAAkAAAACAAEAAAATAAIAAAAHAAEAAAATAAMAAAAGAAEAAAATAAYAAAAHAAEAAAATAAcAAAAGAAEAAAATAAUAAAAHAAAAAAATAAkAAAAHAAAAAAATAAgAAAAHAAEAAAATAAQAAAAHAAEAAAAKAAIAAAAGAAEAAAAKAAMAAAAHAAEAAAAKAAQAAAAGAAEAAAAKAAUAAAAHAAEAAAAKAAYAAAAGAAEAAAAKAAcAAAAHAAEAAAAKAAgAAAAGAAEAAAAKAAkAAAAHAAEAAAALAAIAAAAFAAAAAAALAAMAAAAFAAEAAAALAAQAAAAEAAEAAAALAAUAAAAFAAEAAAALAAYAAAAEAAEAAAALAAcAAAAFAAEAAAALAAgAAAAEAAEAAAALAAkAAAAFAAEAAAAMAAIAAAAFAAEAAAAMAAMAAAAEAAEAAAAMAAQAAAAEAAAAAAAMAAUAAAAEAAEAAAAMAAYAAAAFAAEAAAAMAAcAAAAEAAEAAAAMAAgAAAAEAAAAAAAMAAkAAAAEAAEAAAANAAIAAAAEAAEAAAANAAMAAAAFAAEAAAANAAQAAAAEAAEAAAANAAUAAAAFAAEAAAANAAYAAAAEAAEAAAANAAcAAAAFAAEAAAANAAgAAAAEAAEAAAANAAkAAAAEAAAAAAAOAAIAAAAFAAEAAAAOAAMAAAAEAAEAAAAOAAQAAAAFAAEAAAAOAAUAAAAEAAEAAAAOAAYAAAAEAAAAAAAOAAcAAAAEAAEAAAAOAAgAAAAFAAEAAAAOAAkAAAAEAAEAAAAPAAIAAAAEAAEAAAAPAAMAAAAFAAEAAAAPAAQAAAAEAAEAAAAPAAUAAAAFAAEAAAAPAAYAAAAEAAEAAAAPAAcAAAAFAAEAAAAPAAgAAAAEAAEAAAAPAAkAAAAFAAEAAAAQAAIAAAAFAAEAAAAQAAMAAAAEAAEAAAAQAAQAAAAEAAAAAAAQAAUAAAAEAAEAAAAQAAYAAAAFAAEAAAAQAAcAAAAEAAEAAAAQAAgAAAAFAAEAAAAQAAkAAAAEAAEAAAARAAIAAAAFAAAAAAARAAMAAAAFAAEAAAARAAQAAAAEAAEAAAARAAUAAAAFAAEAAAARAAYAAAAEAAEAAAARAAcAAAAFAAEAAAARAAgAAAAFAAAAAAARAAkAAAAFAAEAAAASAAIAAAAFAAEAAAASAAMAAAAFAAAAAAASAAQAAAAFAAEAAAASAAUAAAAEAAEAAAASAAYAAAAFAAEAAAASAAcAAAAFAAAAAAASAAgAAAAFAAEAAAASAAkAAAAEAAEAAAABAAAAAAADAAEAAAADAAAAAAADAAEAAAAFAAAAAAADAAEAAAAHAAAAAAADAAEAAAAJAAAAAAADAAEAAAAIAP//AAADAAEAAAAGAP//AAADAAEAAAAEAP//AAADAAEAAAACAP//AAADAAEAAAAAAP//AAADAAEAAAAAAAAAAAACAAEAAAABAP//AAACAAEAAAACAAAAAAACAAEAAAADAP//AAACAAEAAAAEAAAAAAACAAEAAAAFAP//AAACAAEAAAAGAAAAAAACAAEAAAAHAP//AAACAAEAAAAIAAAAAAACAAEAAAAJAP//AAACAAEAAAALAAAAAAAHAAEAAAANAAAAAAAHAAEAAAAPAAAAAAAHAAEAAAARAAAAAAAHAAEAAAATAAAAAAAHAAEAAAASAP//AAAHAAEAAAAQAP//AAAHAAEAAAAOAP//AAAHAAEAAAAMAP//AAAHAAEAAAAKAP//AAAHAAEAAAAKAAAAAAAGAAEAAAALAP//AAAGAAEAAAAMAAAAAAAGAAEAAAANAP//AAAGAAEAAAAOAAAAAAAGAAEAAAAPAP//AAAGAAEAAAAQAAAAAAAGAAEAAAARAP//AAAGAAEAAAASAAAAAAAGAAEAAAATAP//AAAGAAEAAAAAAAsAAAADAAEAAAACAAsAAAADAAEAAAAEAAsAAAADAAEAAAAGAAsAAAADAAEAAAAIAAsAAAADAAEAAAAKAAsAAAAHAAEAAAAMAAsAAAAHAAEAAAAOAAsAAAAHAAEAAAAQAAsAAAAHAAEAAAASAAsAAAAHAAEAAAATAAsAAAAGAAEAAAARAAsAAAAGAAEAAAAPAAsAAAAGAAEAAAANAAsAAAAGAAEAAAALAAsAAAAGAAEAAAAJAAsAAAACAAEAAAAHAAsAAAACAAEAAAAFAAsAAAACAAEAAAADAAsAAAACAAEAAAABAAsAAAACAAEAAAA=")
tile_set = SubResource("TileSet_i7mqe")

[node name="FullBackground" type="Sprite2D" parent="."]
position = Vector2(640, 357)
texture = ExtResource("2_kgti3")

[node name="White" type="Sprite2D" parent="."]
self_modulate = Color(1, 0.86, 0.993, 1)
material = SubResource("ShaderMaterial_vytax")
position = Vector2(637, 301)
scale = Vector2(2, 2)
texture = ExtResource("3_1h3k0")

[node name="PointLight2D" type="PointLight2D" parent="White"]
position = Vector2(-2.74998, -12.5)
scale = Vector2(0.330078, 679)
energy = 1.05
texture = SubResource("GradientTexture1D_6ehh7")

[node name="Separator2" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_del0o")
position = Vector2(607, 357)
scale = Vector2(0.9375, 1)
texture = ExtResource("4_l0omh")

[node name="Separator" type="Sprite2D" parent="."]
material = SubResource("ShaderMaterial_78oyj")
position = Vector2(670, 357)
rotation = 3.14159
scale = Vector2(1, -1)
texture = ExtResource("5_y62vi")

[node name="grassborder" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_ke7wo")
}
autoplay = "wave2"

[node name="warpgrassborder" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_n0rqa")
}
autoplay = "wavy3"

[node name="Node2D" parent="." instance=ExtResource("6_sanjg")]
material = SubResource("ShaderMaterial_wb1fm")
position = Vector2(71, 185)
scale = Vector2(2, 2)

[node name="smog" parent="." instance=ExtResource("7_qpput")]
material = SubResource("ShaderMaterial_nqf54")
offset_left = 15.0
offset_top = -32.0
offset_right = 15.0
offset_bottom = -32.0
scale = Vector2(2, 2)

[node name="OnibiSpawner" parent="." instance=ExtResource("8_ny6nx")]
position = Vector2(674, 65)
scale = Vector2(2, 2)
